#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartChickAPI
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NanoFarm")]
	public partial class NanoFarmDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAction(Action instance);
    partial void UpdateAction(Action instance);
    partial void DeleteAction(Action instance);
    partial void InsertAction_Setting(Action_Setting instance);
    partial void UpdateAction_Setting(Action_Setting instance);
    partial void DeleteAction_Setting(Action_Setting instance);
    partial void InsertChicken(Chicken instance);
    partial void UpdateChicken(Chicken instance);
    partial void DeleteChicken(Chicken instance);
    partial void InsertChicken_Library(Chicken_Library instance);
    partial void UpdateChicken_Library(Chicken_Library instance);
    partial void DeleteChicken_Library(Chicken_Library instance);
    partial void InsertChicken_List(Chicken_List instance);
    partial void UpdateChicken_List(Chicken_List instance);
    partial void DeleteChicken_List(Chicken_List instance);
    partial void InsertCondition(Condition instance);
    partial void UpdateCondition(Condition instance);
    partial void DeleteCondition(Condition instance);
    partial void InsertCurrent_Care(Current_Care instance);
    partial void UpdateCurrent_Care(Current_Care instance);
    partial void DeleteCurrent_Care(Current_Care instance);
    partial void InsertHub_Information(Hub_Information instance);
    partial void UpdateHub_Information(Hub_Information instance);
    partial void DeleteHub_Information(Hub_Information instance);
    partial void InsertInoculation_List(Inoculation_List instance);
    partial void UpdateInoculation_List(Inoculation_List instance);
    partial void DeleteInoculation_List(Inoculation_List instance);
    partial void InsertNotification(Notification instance);
    partial void UpdateNotification(Notification instance);
    partial void DeleteNotification(Notification instance);
    partial void InsertNotification_Content(Notification_Content instance);
    partial void UpdateNotification_Content(Notification_Content instance);
    partial void DeleteNotification_Content(Notification_Content instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public NanoFarmDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["NanoFarmConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NanoFarmDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NanoFarmDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NanoFarmDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NanoFarmDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Action> Actions
		{
			get
			{
				return this.GetTable<Action>();
			}
		}
		
		public System.Data.Linq.Table<Action_Setting> Action_Settings
		{
			get
			{
				return this.GetTable<Action_Setting>();
			}
		}
		
		public System.Data.Linq.Table<Chicken> Chickens
		{
			get
			{
				return this.GetTable<Chicken>();
			}
		}
		
		public System.Data.Linq.Table<Chicken_Library> Chicken_Libraries
		{
			get
			{
				return this.GetTable<Chicken_Library>();
			}
		}
		
		public System.Data.Linq.Table<Chicken_List> Chicken_Lists
		{
			get
			{
				return this.GetTable<Chicken_List>();
			}
		}
		
		public System.Data.Linq.Table<Condition> Conditions
		{
			get
			{
				return this.GetTable<Condition>();
			}
		}
		
		public System.Data.Linq.Table<Current_Care> Current_Cares
		{
			get
			{
				return this.GetTable<Current_Care>();
			}
		}
		
		public System.Data.Linq.Table<Hub_Information> Hub_Informations
		{
			get
			{
				return this.GetTable<Hub_Information>();
			}
		}
		
		public System.Data.Linq.Table<Inoculation_List> Inoculation_Lists
		{
			get
			{
				return this.GetTable<Inoculation_List>();
			}
		}
		
		public System.Data.Linq.Table<Notification> Notifications
		{
			get
			{
				return this.GetTable<Notification>();
			}
		}
		
		public System.Data.Linq.Table<Notification_Content> Notification_Contents
		{
			get
			{
				return this.GetTable<Notification_Content>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Action")]
	public partial class Action : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HubID;
		
		private System.Nullable<bool> _Feed_Status;
		
		private System.Nullable<bool> _Active_Status;
		
		private System.Nullable<int> _Active_Speed;
		
		private System.Nullable<bool> _Gate_Status;
		
		private System.Nullable<bool> _Clean_Status;
		
		private System.Nullable<bool> _Sterilise_Status;
		
		private System.Nullable<bool> _Light_Status;
		
		private EntityRef<Hub_Information> _Hub_Information;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHubIDChanging(string value);
    partial void OnHubIDChanged();
    partial void OnFeed_StatusChanging(System.Nullable<bool> value);
    partial void OnFeed_StatusChanged();
    partial void OnActive_StatusChanging(System.Nullable<bool> value);
    partial void OnActive_StatusChanged();
    partial void OnActive_SpeedChanging(System.Nullable<int> value);
    partial void OnActive_SpeedChanged();
    partial void OnGate_StatusChanging(System.Nullable<bool> value);
    partial void OnGate_StatusChanged();
    partial void OnClean_StatusChanging(System.Nullable<bool> value);
    partial void OnClean_StatusChanged();
    partial void OnSterilise_StatusChanging(System.Nullable<bool> value);
    partial void OnSterilise_StatusChanged();
    partial void OnLight_StatusChanging(System.Nullable<bool> value);
    partial void OnLight_StatusChanged();
    #endregion
		
		public Action()
		{
			this._Hub_Information = default(EntityRef<Hub_Information>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HubID
		{
			get
			{
				return this._HubID;
			}
			set
			{
				if ((this._HubID != value))
				{
					if (this._Hub_Information.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHubIDChanging(value);
					this.SendPropertyChanging();
					this._HubID = value;
					this.SendPropertyChanged("HubID");
					this.OnHubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feed_Status", DbType="Bit")]
		public System.Nullable<bool> Feed_Status
		{
			get
			{
				return this._Feed_Status;
			}
			set
			{
				if ((this._Feed_Status != value))
				{
					this.OnFeed_StatusChanging(value);
					this.SendPropertyChanging();
					this._Feed_Status = value;
					this.SendPropertyChanged("Feed_Status");
					this.OnFeed_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active_Status", DbType="Bit")]
		public System.Nullable<bool> Active_Status
		{
			get
			{
				return this._Active_Status;
			}
			set
			{
				if ((this._Active_Status != value))
				{
					this.OnActive_StatusChanging(value);
					this.SendPropertyChanging();
					this._Active_Status = value;
					this.SendPropertyChanged("Active_Status");
					this.OnActive_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active_Speed", DbType="Int")]
		public System.Nullable<int> Active_Speed
		{
			get
			{
				return this._Active_Speed;
			}
			set
			{
				if ((this._Active_Speed != value))
				{
					this.OnActive_SpeedChanging(value);
					this.SendPropertyChanging();
					this._Active_Speed = value;
					this.SendPropertyChanged("Active_Speed");
					this.OnActive_SpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gate_Status", DbType="Bit")]
		public System.Nullable<bool> Gate_Status
		{
			get
			{
				return this._Gate_Status;
			}
			set
			{
				if ((this._Gate_Status != value))
				{
					this.OnGate_StatusChanging(value);
					this.SendPropertyChanging();
					this._Gate_Status = value;
					this.SendPropertyChanged("Gate_Status");
					this.OnGate_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Clean_Status", DbType="Bit")]
		public System.Nullable<bool> Clean_Status
		{
			get
			{
				return this._Clean_Status;
			}
			set
			{
				if ((this._Clean_Status != value))
				{
					this.OnClean_StatusChanging(value);
					this.SendPropertyChanging();
					this._Clean_Status = value;
					this.SendPropertyChanged("Clean_Status");
					this.OnClean_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sterilise_Status", DbType="Bit")]
		public System.Nullable<bool> Sterilise_Status
		{
			get
			{
				return this._Sterilise_Status;
			}
			set
			{
				if ((this._Sterilise_Status != value))
				{
					this.OnSterilise_StatusChanging(value);
					this.SendPropertyChanging();
					this._Sterilise_Status = value;
					this.SendPropertyChanged("Sterilise_Status");
					this.OnSterilise_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Light_Status", DbType="Bit")]
		public System.Nullable<bool> Light_Status
		{
			get
			{
				return this._Light_Status;
			}
			set
			{
				if ((this._Light_Status != value))
				{
					this.OnLight_StatusChanging(value);
					this.SendPropertyChanging();
					this._Light_Status = value;
					this.SendPropertyChanged("Light_Status");
					this.OnLight_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_Information_Action", Storage="_Hub_Information", ThisKey="HubID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Hub_Information Hub_Information
		{
			get
			{
				return this._Hub_Information.Entity;
			}
			set
			{
				Hub_Information previousValue = this._Hub_Information.Entity;
				if (((previousValue != value) 
							|| (this._Hub_Information.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hub_Information.Entity = null;
						previousValue.Action = null;
					}
					this._Hub_Information.Entity = value;
					if ((value != null))
					{
						value.Action = this;
						this._HubID = value.ID;
					}
					else
					{
						this._HubID = default(string);
					}
					this.SendPropertyChanged("Hub_Information");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Action_Setting")]
	public partial class Action_Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HubID;
		
		private string _Feed_Moment;
		
		private System.Nullable<bool> _Feed_Mode;
		
		private string _Active_Moment;
		
		private string _Active_Speed;
		
		private string _Active_Time;
		
		private System.Nullable<bool> _Active_Mode;
		
		private string _Open_Gate;
		
		private string _Close_Gate;
		
		private System.Nullable<bool> _Gate_Mode;
		
		private string _Clean_Moment;
		
		private System.Nullable<bool> _Clean_Mode;
		
		private string _Sterilise_Moment_Day;
		
		private string _Sterilise_Moment_Time;
		
		private System.Nullable<bool> _Sterilise_Mode;
		
		private System.Nullable<bool> _Light_Mode;
		
		private string _Light_On_Time;
		
		private string _Light_Off_Time;
		
		private EntityRef<Hub_Information> _Hub_Information;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHubIDChanging(string value);
    partial void OnHubIDChanged();
    partial void OnFeed_MomentChanging(string value);
    partial void OnFeed_MomentChanged();
    partial void OnFeed_ModeChanging(System.Nullable<bool> value);
    partial void OnFeed_ModeChanged();
    partial void OnActive_MomentChanging(string value);
    partial void OnActive_MomentChanged();
    partial void OnActive_SpeedChanging(string value);
    partial void OnActive_SpeedChanged();
    partial void OnActive_TimeChanging(string value);
    partial void OnActive_TimeChanged();
    partial void OnActive_ModeChanging(System.Nullable<bool> value);
    partial void OnActive_ModeChanged();
    partial void OnOpen_GateChanging(string value);
    partial void OnOpen_GateChanged();
    partial void OnClose_GateChanging(string value);
    partial void OnClose_GateChanged();
    partial void OnGate_ModeChanging(System.Nullable<bool> value);
    partial void OnGate_ModeChanged();
    partial void OnClean_MomentChanging(string value);
    partial void OnClean_MomentChanged();
    partial void OnClean_ModeChanging(System.Nullable<bool> value);
    partial void OnClean_ModeChanged();
    partial void OnSterilise_Moment_DayChanging(string value);
    partial void OnSterilise_Moment_DayChanged();
    partial void OnSterilise_Moment_TimeChanging(string value);
    partial void OnSterilise_Moment_TimeChanged();
    partial void OnSterilise_ModeChanging(System.Nullable<bool> value);
    partial void OnSterilise_ModeChanged();
    partial void OnLight_ModeChanging(System.Nullable<bool> value);
    partial void OnLight_ModeChanged();
    partial void OnLight_On_TimeChanging(string value);
    partial void OnLight_On_TimeChanged();
    partial void OnLight_Off_TimeChanging(string value);
    partial void OnLight_Off_TimeChanged();
    #endregion
		
		public Action_Setting()
		{
			this._Hub_Information = default(EntityRef<Hub_Information>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HubID
		{
			get
			{
				return this._HubID;
			}
			set
			{
				if ((this._HubID != value))
				{
					if (this._Hub_Information.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHubIDChanging(value);
					this.SendPropertyChanging();
					this._HubID = value;
					this.SendPropertyChanged("HubID");
					this.OnHubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feed_Moment", DbType="NVarChar(50)")]
		public string Feed_Moment
		{
			get
			{
				return this._Feed_Moment;
			}
			set
			{
				if ((this._Feed_Moment != value))
				{
					this.OnFeed_MomentChanging(value);
					this.SendPropertyChanging();
					this._Feed_Moment = value;
					this.SendPropertyChanged("Feed_Moment");
					this.OnFeed_MomentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feed_Mode", DbType="Bit")]
		public System.Nullable<bool> Feed_Mode
		{
			get
			{
				return this._Feed_Mode;
			}
			set
			{
				if ((this._Feed_Mode != value))
				{
					this.OnFeed_ModeChanging(value);
					this.SendPropertyChanging();
					this._Feed_Mode = value;
					this.SendPropertyChanged("Feed_Mode");
					this.OnFeed_ModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active_Moment", DbType="NVarChar(50)")]
		public string Active_Moment
		{
			get
			{
				return this._Active_Moment;
			}
			set
			{
				if ((this._Active_Moment != value))
				{
					this.OnActive_MomentChanging(value);
					this.SendPropertyChanging();
					this._Active_Moment = value;
					this.SendPropertyChanged("Active_Moment");
					this.OnActive_MomentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active_Speed", DbType="NVarChar(50)")]
		public string Active_Speed
		{
			get
			{
				return this._Active_Speed;
			}
			set
			{
				if ((this._Active_Speed != value))
				{
					this.OnActive_SpeedChanging(value);
					this.SendPropertyChanging();
					this._Active_Speed = value;
					this.SendPropertyChanged("Active_Speed");
					this.OnActive_SpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active_Time", DbType="NVarChar(50)")]
		public string Active_Time
		{
			get
			{
				return this._Active_Time;
			}
			set
			{
				if ((this._Active_Time != value))
				{
					this.OnActive_TimeChanging(value);
					this.SendPropertyChanging();
					this._Active_Time = value;
					this.SendPropertyChanged("Active_Time");
					this.OnActive_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active_Mode", DbType="Bit")]
		public System.Nullable<bool> Active_Mode
		{
			get
			{
				return this._Active_Mode;
			}
			set
			{
				if ((this._Active_Mode != value))
				{
					this.OnActive_ModeChanging(value);
					this.SendPropertyChanging();
					this._Active_Mode = value;
					this.SendPropertyChanged("Active_Mode");
					this.OnActive_ModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Open_Gate", DbType="NVarChar(50)")]
		public string Open_Gate
		{
			get
			{
				return this._Open_Gate;
			}
			set
			{
				if ((this._Open_Gate != value))
				{
					this.OnOpen_GateChanging(value);
					this.SendPropertyChanging();
					this._Open_Gate = value;
					this.SendPropertyChanged("Open_Gate");
					this.OnOpen_GateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Close_Gate", DbType="NVarChar(50)")]
		public string Close_Gate
		{
			get
			{
				return this._Close_Gate;
			}
			set
			{
				if ((this._Close_Gate != value))
				{
					this.OnClose_GateChanging(value);
					this.SendPropertyChanging();
					this._Close_Gate = value;
					this.SendPropertyChanged("Close_Gate");
					this.OnClose_GateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gate_Mode", DbType="Bit")]
		public System.Nullable<bool> Gate_Mode
		{
			get
			{
				return this._Gate_Mode;
			}
			set
			{
				if ((this._Gate_Mode != value))
				{
					this.OnGate_ModeChanging(value);
					this.SendPropertyChanging();
					this._Gate_Mode = value;
					this.SendPropertyChanged("Gate_Mode");
					this.OnGate_ModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Clean_Moment", DbType="NVarChar(50)")]
		public string Clean_Moment
		{
			get
			{
				return this._Clean_Moment;
			}
			set
			{
				if ((this._Clean_Moment != value))
				{
					this.OnClean_MomentChanging(value);
					this.SendPropertyChanging();
					this._Clean_Moment = value;
					this.SendPropertyChanged("Clean_Moment");
					this.OnClean_MomentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Clean_Mode", DbType="Bit")]
		public System.Nullable<bool> Clean_Mode
		{
			get
			{
				return this._Clean_Mode;
			}
			set
			{
				if ((this._Clean_Mode != value))
				{
					this.OnClean_ModeChanging(value);
					this.SendPropertyChanging();
					this._Clean_Mode = value;
					this.SendPropertyChanged("Clean_Mode");
					this.OnClean_ModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sterilise_Moment_Day", DbType="NVarChar(50)")]
		public string Sterilise_Moment_Day
		{
			get
			{
				return this._Sterilise_Moment_Day;
			}
			set
			{
				if ((this._Sterilise_Moment_Day != value))
				{
					this.OnSterilise_Moment_DayChanging(value);
					this.SendPropertyChanging();
					this._Sterilise_Moment_Day = value;
					this.SendPropertyChanged("Sterilise_Moment_Day");
					this.OnSterilise_Moment_DayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sterilise_Moment_Time", DbType="NVarChar(50)")]
		public string Sterilise_Moment_Time
		{
			get
			{
				return this._Sterilise_Moment_Time;
			}
			set
			{
				if ((this._Sterilise_Moment_Time != value))
				{
					this.OnSterilise_Moment_TimeChanging(value);
					this.SendPropertyChanging();
					this._Sterilise_Moment_Time = value;
					this.SendPropertyChanged("Sterilise_Moment_Time");
					this.OnSterilise_Moment_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sterilise_Mode", DbType="Bit")]
		public System.Nullable<bool> Sterilise_Mode
		{
			get
			{
				return this._Sterilise_Mode;
			}
			set
			{
				if ((this._Sterilise_Mode != value))
				{
					this.OnSterilise_ModeChanging(value);
					this.SendPropertyChanging();
					this._Sterilise_Mode = value;
					this.SendPropertyChanged("Sterilise_Mode");
					this.OnSterilise_ModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Light_Mode", DbType="Bit")]
		public System.Nullable<bool> Light_Mode
		{
			get
			{
				return this._Light_Mode;
			}
			set
			{
				if ((this._Light_Mode != value))
				{
					this.OnLight_ModeChanging(value);
					this.SendPropertyChanging();
					this._Light_Mode = value;
					this.SendPropertyChanged("Light_Mode");
					this.OnLight_ModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Light_On_Time", DbType="NVarChar(50)")]
		public string Light_On_Time
		{
			get
			{
				return this._Light_On_Time;
			}
			set
			{
				if ((this._Light_On_Time != value))
				{
					this.OnLight_On_TimeChanging(value);
					this.SendPropertyChanging();
					this._Light_On_Time = value;
					this.SendPropertyChanged("Light_On_Time");
					this.OnLight_On_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Light_Off_Time", DbType="NVarChar(50)")]
		public string Light_Off_Time
		{
			get
			{
				return this._Light_Off_Time;
			}
			set
			{
				if ((this._Light_Off_Time != value))
				{
					this.OnLight_Off_TimeChanging(value);
					this.SendPropertyChanging();
					this._Light_Off_Time = value;
					this.SendPropertyChanged("Light_Off_Time");
					this.OnLight_Off_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_Information_Action_Setting", Storage="_Hub_Information", ThisKey="HubID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Hub_Information Hub_Information
		{
			get
			{
				return this._Hub_Information.Entity;
			}
			set
			{
				Hub_Information previousValue = this._Hub_Information.Entity;
				if (((previousValue != value) 
							|| (this._Hub_Information.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hub_Information.Entity = null;
						previousValue.Action_Setting = null;
					}
					this._Hub_Information.Entity = value;
					if ((value != null))
					{
						value.Action_Setting = this;
						this._HubID = value.ID;
					}
					else
					{
						this._HubID = default(string);
					}
					this.SendPropertyChanged("Hub_Information");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Chicken")]
	public partial class Chicken : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HubID;
		
		private string _SpeciesID;
		
		private string _Name;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<int> _Outside;
		
		private System.Nullable<int> _Inside;
		
		private string _DayOld;
		
		private System.Nullable<double> _Weight;
		
		private System.Nullable<double> _BodyTemp;
		
		private EntityRef<Hub_Information> _Hub_Information;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHubIDChanging(string value);
    partial void OnHubIDChanged();
    partial void OnSpeciesIDChanging(string value);
    partial void OnSpeciesIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnOutsideChanging(System.Nullable<int> value);
    partial void OnOutsideChanged();
    partial void OnInsideChanging(System.Nullable<int> value);
    partial void OnInsideChanged();
    partial void OnDayOldChanging(string value);
    partial void OnDayOldChanged();
    partial void OnWeightChanging(System.Nullable<double> value);
    partial void OnWeightChanged();
    partial void OnBodyTempChanging(System.Nullable<double> value);
    partial void OnBodyTempChanged();
    #endregion
		
		public Chicken()
		{
			this._Hub_Information = default(EntityRef<Hub_Information>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HubID
		{
			get
			{
				return this._HubID;
			}
			set
			{
				if ((this._HubID != value))
				{
					if (this._Hub_Information.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHubIDChanging(value);
					this.SendPropertyChanging();
					this._HubID = value;
					this.SendPropertyChanged("HubID");
					this.OnHubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeciesID", DbType="NVarChar(50)")]
		public string SpeciesID
		{
			get
			{
				return this._SpeciesID;
			}
			set
			{
				if ((this._SpeciesID != value))
				{
					this.OnSpeciesIDChanging(value);
					this.SendPropertyChanging();
					this._SpeciesID = value;
					this.SendPropertyChanged("SpeciesID");
					this.OnSpeciesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Outside", DbType="Int")]
		public System.Nullable<int> Outside
		{
			get
			{
				return this._Outside;
			}
			set
			{
				if ((this._Outside != value))
				{
					this.OnOutsideChanging(value);
					this.SendPropertyChanging();
					this._Outside = value;
					this.SendPropertyChanged("Outside");
					this.OnOutsideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Inside", DbType="Int")]
		public System.Nullable<int> Inside
		{
			get
			{
				return this._Inside;
			}
			set
			{
				if ((this._Inside != value))
				{
					this.OnInsideChanging(value);
					this.SendPropertyChanging();
					this._Inside = value;
					this.SendPropertyChanged("Inside");
					this.OnInsideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOld", DbType="NVarChar(50)")]
		public string DayOld
		{
			get
			{
				return this._DayOld;
			}
			set
			{
				if ((this._DayOld != value))
				{
					this.OnDayOldChanging(value);
					this.SendPropertyChanging();
					this._DayOld = value;
					this.SendPropertyChanged("DayOld");
					this.OnDayOldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Float")]
		public System.Nullable<double> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyTemp", DbType="Float")]
		public System.Nullable<double> BodyTemp
		{
			get
			{
				return this._BodyTemp;
			}
			set
			{
				if ((this._BodyTemp != value))
				{
					this.OnBodyTempChanging(value);
					this.SendPropertyChanging();
					this._BodyTemp = value;
					this.SendPropertyChanged("BodyTemp");
					this.OnBodyTempChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_Information_Chicken", Storage="_Hub_Information", ThisKey="HubID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Hub_Information Hub_Information
		{
			get
			{
				return this._Hub_Information.Entity;
			}
			set
			{
				Hub_Information previousValue = this._Hub_Information.Entity;
				if (((previousValue != value) 
							|| (this._Hub_Information.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hub_Information.Entity = null;
						previousValue.Chicken = null;
					}
					this._Hub_Information.Entity = value;
					if ((value != null))
					{
						value.Chicken = this;
						this._HubID = value.ID;
					}
					else
					{
						this._HubID = default(string);
					}
					this.SendPropertyChanged("Hub_Information");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Chicken_Library")]
	public partial class Chicken_Library : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TypeID;
		
		private string _SpeciesID;
		
		private string _Name;
		
		private string _Picture;
		
		private System.Nullable<int> _DayOld_Min;
		
		private System.Nullable<int> _DayOld_Max;
		
		private System.Nullable<int> _Temperature_Min;
		
		private System.Nullable<int> _Temperature_Max;
		
		private System.Nullable<int> _Humidity_Min;
		
		private System.Nullable<int> _Humidity_Max;
		
		private string _Lighting_Duration;
		
		private System.Nullable<double> _Food_Amount;
		
		private System.Nullable<int> _Food_Eat_No;
		
		private System.Nullable<double> _Weight;
		
		private EntitySet<Inoculation_List> _Inoculation_Lists;
		
		private EntityRef<Chicken_List> _Chicken_List;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(string value);
    partial void OnTypeIDChanged();
    partial void OnSpeciesIDChanging(string value);
    partial void OnSpeciesIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnDayOld_MinChanging(System.Nullable<int> value);
    partial void OnDayOld_MinChanged();
    partial void OnDayOld_MaxChanging(System.Nullable<int> value);
    partial void OnDayOld_MaxChanged();
    partial void OnTemperature_MinChanging(System.Nullable<int> value);
    partial void OnTemperature_MinChanged();
    partial void OnTemperature_MaxChanging(System.Nullable<int> value);
    partial void OnTemperature_MaxChanged();
    partial void OnHumidity_MinChanging(System.Nullable<int> value);
    partial void OnHumidity_MinChanged();
    partial void OnHumidity_MaxChanging(System.Nullable<int> value);
    partial void OnHumidity_MaxChanged();
    partial void OnLighting_DurationChanging(string value);
    partial void OnLighting_DurationChanged();
    partial void OnFood_AmountChanging(System.Nullable<double> value);
    partial void OnFood_AmountChanged();
    partial void OnFood_Eat_NoChanging(System.Nullable<int> value);
    partial void OnFood_Eat_NoChanged();
    partial void OnWeightChanging(System.Nullable<double> value);
    partial void OnWeightChanged();
    #endregion
		
		public Chicken_Library()
		{
			this._Inoculation_Lists = new EntitySet<Inoculation_List>(new Action<Inoculation_List>(this.attach_Inoculation_Lists), new Action<Inoculation_List>(this.detach_Inoculation_Lists));
			this._Chicken_List = default(EntityRef<Chicken_List>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeciesID", DbType="NVarChar(50)")]
		public string SpeciesID
		{
			get
			{
				return this._SpeciesID;
			}
			set
			{
				if ((this._SpeciesID != value))
				{
					if (this._Chicken_List.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpeciesIDChanging(value);
					this.SendPropertyChanging();
					this._SpeciesID = value;
					this.SendPropertyChanged("SpeciesID");
					this.OnSpeciesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="NVarChar(50)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOld_Min", DbType="Int")]
		public System.Nullable<int> DayOld_Min
		{
			get
			{
				return this._DayOld_Min;
			}
			set
			{
				if ((this._DayOld_Min != value))
				{
					this.OnDayOld_MinChanging(value);
					this.SendPropertyChanging();
					this._DayOld_Min = value;
					this.SendPropertyChanged("DayOld_Min");
					this.OnDayOld_MinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOld_Max", DbType="Int")]
		public System.Nullable<int> DayOld_Max
		{
			get
			{
				return this._DayOld_Max;
			}
			set
			{
				if ((this._DayOld_Max != value))
				{
					this.OnDayOld_MaxChanging(value);
					this.SendPropertyChanging();
					this._DayOld_Max = value;
					this.SendPropertyChanged("DayOld_Max");
					this.OnDayOld_MaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature_Min", DbType="Int")]
		public System.Nullable<int> Temperature_Min
		{
			get
			{
				return this._Temperature_Min;
			}
			set
			{
				if ((this._Temperature_Min != value))
				{
					this.OnTemperature_MinChanging(value);
					this.SendPropertyChanging();
					this._Temperature_Min = value;
					this.SendPropertyChanged("Temperature_Min");
					this.OnTemperature_MinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature_Max", DbType="Int")]
		public System.Nullable<int> Temperature_Max
		{
			get
			{
				return this._Temperature_Max;
			}
			set
			{
				if ((this._Temperature_Max != value))
				{
					this.OnTemperature_MaxChanging(value);
					this.SendPropertyChanging();
					this._Temperature_Max = value;
					this.SendPropertyChanged("Temperature_Max");
					this.OnTemperature_MaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity_Min", DbType="Int")]
		public System.Nullable<int> Humidity_Min
		{
			get
			{
				return this._Humidity_Min;
			}
			set
			{
				if ((this._Humidity_Min != value))
				{
					this.OnHumidity_MinChanging(value);
					this.SendPropertyChanging();
					this._Humidity_Min = value;
					this.SendPropertyChanged("Humidity_Min");
					this.OnHumidity_MinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity_Max", DbType="Int")]
		public System.Nullable<int> Humidity_Max
		{
			get
			{
				return this._Humidity_Max;
			}
			set
			{
				if ((this._Humidity_Max != value))
				{
					this.OnHumidity_MaxChanging(value);
					this.SendPropertyChanging();
					this._Humidity_Max = value;
					this.SendPropertyChanged("Humidity_Max");
					this.OnHumidity_MaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lighting_Duration", DbType="NVarChar(50)")]
		public string Lighting_Duration
		{
			get
			{
				return this._Lighting_Duration;
			}
			set
			{
				if ((this._Lighting_Duration != value))
				{
					this.OnLighting_DurationChanging(value);
					this.SendPropertyChanging();
					this._Lighting_Duration = value;
					this.SendPropertyChanged("Lighting_Duration");
					this.OnLighting_DurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Food_Amount", DbType="Float")]
		public System.Nullable<double> Food_Amount
		{
			get
			{
				return this._Food_Amount;
			}
			set
			{
				if ((this._Food_Amount != value))
				{
					this.OnFood_AmountChanging(value);
					this.SendPropertyChanging();
					this._Food_Amount = value;
					this.SendPropertyChanged("Food_Amount");
					this.OnFood_AmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Food_Eat_No", DbType="Int")]
		public System.Nullable<int> Food_Eat_No
		{
			get
			{
				return this._Food_Eat_No;
			}
			set
			{
				if ((this._Food_Eat_No != value))
				{
					this.OnFood_Eat_NoChanging(value);
					this.SendPropertyChanging();
					this._Food_Eat_No = value;
					this.SendPropertyChanged("Food_Eat_No");
					this.OnFood_Eat_NoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Float")]
		public System.Nullable<double> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chicken_Library_Inoculation_List", Storage="_Inoculation_Lists", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<Inoculation_List> Inoculation_Lists
		{
			get
			{
				return this._Inoculation_Lists;
			}
			set
			{
				this._Inoculation_Lists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chicken_List_Chicken_Library", Storage="_Chicken_List", ThisKey="SpeciesID", OtherKey="SpeciesID", IsForeignKey=true)]
		public Chicken_List Chicken_List
		{
			get
			{
				return this._Chicken_List.Entity;
			}
			set
			{
				Chicken_List previousValue = this._Chicken_List.Entity;
				if (((previousValue != value) 
							|| (this._Chicken_List.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chicken_List.Entity = null;
						previousValue.Chicken_Libraries.Remove(this);
					}
					this._Chicken_List.Entity = value;
					if ((value != null))
					{
						value.Chicken_Libraries.Add(this);
						this._SpeciesID = value.SpeciesID;
					}
					else
					{
						this._SpeciesID = default(string);
					}
					this.SendPropertyChanged("Chicken_List");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inoculation_Lists(Inoculation_List entity)
		{
			this.SendPropertyChanging();
			entity.Chicken_Library = this;
		}
		
		private void detach_Inoculation_Lists(Inoculation_List entity)
		{
			this.SendPropertyChanging();
			entity.Chicken_Library = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Chicken_List")]
	public partial class Chicken_List : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SpeciesID;
		
		private string _Name;
		
		private string _Picture;
		
		private EntitySet<Chicken_Library> _Chicken_Libraries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpeciesIDChanging(string value);
    partial void OnSpeciesIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    #endregion
		
		public Chicken_List()
		{
			this._Chicken_Libraries = new EntitySet<Chicken_Library>(new Action<Chicken_Library>(this.attach_Chicken_Libraries), new Action<Chicken_Library>(this.detach_Chicken_Libraries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeciesID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SpeciesID
		{
			get
			{
				return this._SpeciesID;
			}
			set
			{
				if ((this._SpeciesID != value))
				{
					this.OnSpeciesIDChanging(value);
					this.SendPropertyChanging();
					this._SpeciesID = value;
					this.SendPropertyChanged("SpeciesID");
					this.OnSpeciesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="NVarChar(50)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chicken_List_Chicken_Library", Storage="_Chicken_Libraries", ThisKey="SpeciesID", OtherKey="SpeciesID")]
		public EntitySet<Chicken_Library> Chicken_Libraries
		{
			get
			{
				return this._Chicken_Libraries;
			}
			set
			{
				this._Chicken_Libraries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Chicken_Libraries(Chicken_Library entity)
		{
			this.SendPropertyChanging();
			entity.Chicken_List = this;
		}
		
		private void detach_Chicken_Libraries(Chicken_Library entity)
		{
			this.SendPropertyChanging();
			entity.Chicken_List = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Condition")]
	public partial class Condition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HubID;
		
		private System.Nullable<int> _Temperature_Outside;
		
		private System.Nullable<int> _Temperature_Inside;
		
		private System.Nullable<int> _Temperature_Heater;
		
		private System.Nullable<int> _Humidity_Outside;
		
		private System.Nullable<int> _Humidity_Inside;
		
		private System.Nullable<bool> _Humidity_MistingStatus;
		
		private System.Nullable<int> _Light_Outside;
		
		private System.Nullable<int> _Light_Inside;
		
		private System.Nullable<bool> _Light_Lamp_Status;
		
		private EntityRef<Hub_Information> _Hub_Information;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHubIDChanging(string value);
    partial void OnHubIDChanged();
    partial void OnTemperature_OutsideChanging(System.Nullable<int> value);
    partial void OnTemperature_OutsideChanged();
    partial void OnTemperature_InsideChanging(System.Nullable<int> value);
    partial void OnTemperature_InsideChanged();
    partial void OnTemperature_HeaterChanging(System.Nullable<int> value);
    partial void OnTemperature_HeaterChanged();
    partial void OnHumidity_OutsideChanging(System.Nullable<int> value);
    partial void OnHumidity_OutsideChanged();
    partial void OnHumidity_InsideChanging(System.Nullable<int> value);
    partial void OnHumidity_InsideChanged();
    partial void OnHumidity_MistingStatusChanging(System.Nullable<bool> value);
    partial void OnHumidity_MistingStatusChanged();
    partial void OnLight_OutsideChanging(System.Nullable<int> value);
    partial void OnLight_OutsideChanged();
    partial void OnLight_InsideChanging(System.Nullable<int> value);
    partial void OnLight_InsideChanged();
    partial void OnLight_Lamp_StatusChanging(System.Nullable<bool> value);
    partial void OnLight_Lamp_StatusChanged();
    #endregion
		
		public Condition()
		{
			this._Hub_Information = default(EntityRef<Hub_Information>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HubID
		{
			get
			{
				return this._HubID;
			}
			set
			{
				if ((this._HubID != value))
				{
					if (this._Hub_Information.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHubIDChanging(value);
					this.SendPropertyChanging();
					this._HubID = value;
					this.SendPropertyChanged("HubID");
					this.OnHubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature_Outside", DbType="Int")]
		public System.Nullable<int> Temperature_Outside
		{
			get
			{
				return this._Temperature_Outside;
			}
			set
			{
				if ((this._Temperature_Outside != value))
				{
					this.OnTemperature_OutsideChanging(value);
					this.SendPropertyChanging();
					this._Temperature_Outside = value;
					this.SendPropertyChanged("Temperature_Outside");
					this.OnTemperature_OutsideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature_Inside", DbType="Int")]
		public System.Nullable<int> Temperature_Inside
		{
			get
			{
				return this._Temperature_Inside;
			}
			set
			{
				if ((this._Temperature_Inside != value))
				{
					this.OnTemperature_InsideChanging(value);
					this.SendPropertyChanging();
					this._Temperature_Inside = value;
					this.SendPropertyChanged("Temperature_Inside");
					this.OnTemperature_InsideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature_Heater", DbType="Int")]
		public System.Nullable<int> Temperature_Heater
		{
			get
			{
				return this._Temperature_Heater;
			}
			set
			{
				if ((this._Temperature_Heater != value))
				{
					this.OnTemperature_HeaterChanging(value);
					this.SendPropertyChanging();
					this._Temperature_Heater = value;
					this.SendPropertyChanged("Temperature_Heater");
					this.OnTemperature_HeaterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity_Outside", DbType="Int")]
		public System.Nullable<int> Humidity_Outside
		{
			get
			{
				return this._Humidity_Outside;
			}
			set
			{
				if ((this._Humidity_Outside != value))
				{
					this.OnHumidity_OutsideChanging(value);
					this.SendPropertyChanging();
					this._Humidity_Outside = value;
					this.SendPropertyChanged("Humidity_Outside");
					this.OnHumidity_OutsideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity_Inside", DbType="Int")]
		public System.Nullable<int> Humidity_Inside
		{
			get
			{
				return this._Humidity_Inside;
			}
			set
			{
				if ((this._Humidity_Inside != value))
				{
					this.OnHumidity_InsideChanging(value);
					this.SendPropertyChanging();
					this._Humidity_Inside = value;
					this.SendPropertyChanged("Humidity_Inside");
					this.OnHumidity_InsideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity_MistingStatus", DbType="Bit")]
		public System.Nullable<bool> Humidity_MistingStatus
		{
			get
			{
				return this._Humidity_MistingStatus;
			}
			set
			{
				if ((this._Humidity_MistingStatus != value))
				{
					this.OnHumidity_MistingStatusChanging(value);
					this.SendPropertyChanging();
					this._Humidity_MistingStatus = value;
					this.SendPropertyChanged("Humidity_MistingStatus");
					this.OnHumidity_MistingStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Light_Outside", DbType="Int")]
		public System.Nullable<int> Light_Outside
		{
			get
			{
				return this._Light_Outside;
			}
			set
			{
				if ((this._Light_Outside != value))
				{
					this.OnLight_OutsideChanging(value);
					this.SendPropertyChanging();
					this._Light_Outside = value;
					this.SendPropertyChanged("Light_Outside");
					this.OnLight_OutsideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Light_Inside", DbType="Int")]
		public System.Nullable<int> Light_Inside
		{
			get
			{
				return this._Light_Inside;
			}
			set
			{
				if ((this._Light_Inside != value))
				{
					this.OnLight_InsideChanging(value);
					this.SendPropertyChanging();
					this._Light_Inside = value;
					this.SendPropertyChanged("Light_Inside");
					this.OnLight_InsideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Light_Lamp_Status", DbType="Bit")]
		public System.Nullable<bool> Light_Lamp_Status
		{
			get
			{
				return this._Light_Lamp_Status;
			}
			set
			{
				if ((this._Light_Lamp_Status != value))
				{
					this.OnLight_Lamp_StatusChanging(value);
					this.SendPropertyChanging();
					this._Light_Lamp_Status = value;
					this.SendPropertyChanged("Light_Lamp_Status");
					this.OnLight_Lamp_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_Information_Condition", Storage="_Hub_Information", ThisKey="HubID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Hub_Information Hub_Information
		{
			get
			{
				return this._Hub_Information.Entity;
			}
			set
			{
				Hub_Information previousValue = this._Hub_Information.Entity;
				if (((previousValue != value) 
							|| (this._Hub_Information.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hub_Information.Entity = null;
						previousValue.Condition = null;
					}
					this._Hub_Information.Entity = value;
					if ((value != null))
					{
						value.Condition = this;
						this._HubID = value.ID;
					}
					else
					{
						this._HubID = default(string);
					}
					this.SendPropertyChanged("Hub_Information");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Current_Care")]
	public partial class Current_Care : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HubID;
		
		private string _SpeciesID;
		
		private string _Name;
		
		private string _Picture;
		
		private System.Nullable<int> _Temperature_Value;
		
		private System.Nullable<int> _Temperature_Min;
		
		private System.Nullable<int> _Temperature_Max;
		
		private System.Nullable<int> _Humidity_Value;
		
		private System.Nullable<int> _Humidity_Min;
		
		private System.Nullable<int> _Humidity_Max;
		
		private string _Lighting_Duration;
		
		private System.Nullable<double> _Food_Amount;
		
		private System.Nullable<int> _Food_Eat_No;
		
		private System.Nullable<double> _Weight;
		
		private EntityRef<Hub_Information> _Hub_Information;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHubIDChanging(string value);
    partial void OnHubIDChanged();
    partial void OnSpeciesIDChanging(string value);
    partial void OnSpeciesIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnTemperature_ValueChanging(System.Nullable<int> value);
    partial void OnTemperature_ValueChanged();
    partial void OnTemperature_MinChanging(System.Nullable<int> value);
    partial void OnTemperature_MinChanged();
    partial void OnTemperature_MaxChanging(System.Nullable<int> value);
    partial void OnTemperature_MaxChanged();
    partial void OnHumidity_ValueChanging(System.Nullable<int> value);
    partial void OnHumidity_ValueChanged();
    partial void OnHumidity_MinChanging(System.Nullable<int> value);
    partial void OnHumidity_MinChanged();
    partial void OnHumidity_MaxChanging(System.Nullable<int> value);
    partial void OnHumidity_MaxChanged();
    partial void OnLighting_DurationChanging(string value);
    partial void OnLighting_DurationChanged();
    partial void OnFood_AmountChanging(System.Nullable<double> value);
    partial void OnFood_AmountChanged();
    partial void OnFood_Eat_NoChanging(System.Nullable<int> value);
    partial void OnFood_Eat_NoChanged();
    partial void OnWeightChanging(System.Nullable<double> value);
    partial void OnWeightChanged();
    #endregion
		
		public Current_Care()
		{
			this._Hub_Information = default(EntityRef<Hub_Information>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HubID
		{
			get
			{
				return this._HubID;
			}
			set
			{
				if ((this._HubID != value))
				{
					if (this._Hub_Information.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHubIDChanging(value);
					this.SendPropertyChanging();
					this._HubID = value;
					this.SendPropertyChanged("HubID");
					this.OnHubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeciesID", DbType="NVarChar(50)")]
		public string SpeciesID
		{
			get
			{
				return this._SpeciesID;
			}
			set
			{
				if ((this._SpeciesID != value))
				{
					this.OnSpeciesIDChanging(value);
					this.SendPropertyChanging();
					this._SpeciesID = value;
					this.SendPropertyChanged("SpeciesID");
					this.OnSpeciesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="NVarChar(50)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature_Value", DbType="Int")]
		public System.Nullable<int> Temperature_Value
		{
			get
			{
				return this._Temperature_Value;
			}
			set
			{
				if ((this._Temperature_Value != value))
				{
					this.OnTemperature_ValueChanging(value);
					this.SendPropertyChanging();
					this._Temperature_Value = value;
					this.SendPropertyChanged("Temperature_Value");
					this.OnTemperature_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature_Min", DbType="Int")]
		public System.Nullable<int> Temperature_Min
		{
			get
			{
				return this._Temperature_Min;
			}
			set
			{
				if ((this._Temperature_Min != value))
				{
					this.OnTemperature_MinChanging(value);
					this.SendPropertyChanging();
					this._Temperature_Min = value;
					this.SendPropertyChanged("Temperature_Min");
					this.OnTemperature_MinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature_Max", DbType="Int")]
		public System.Nullable<int> Temperature_Max
		{
			get
			{
				return this._Temperature_Max;
			}
			set
			{
				if ((this._Temperature_Max != value))
				{
					this.OnTemperature_MaxChanging(value);
					this.SendPropertyChanging();
					this._Temperature_Max = value;
					this.SendPropertyChanged("Temperature_Max");
					this.OnTemperature_MaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity_Value", DbType="Int")]
		public System.Nullable<int> Humidity_Value
		{
			get
			{
				return this._Humidity_Value;
			}
			set
			{
				if ((this._Humidity_Value != value))
				{
					this.OnHumidity_ValueChanging(value);
					this.SendPropertyChanging();
					this._Humidity_Value = value;
					this.SendPropertyChanged("Humidity_Value");
					this.OnHumidity_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity_Min", DbType="Int")]
		public System.Nullable<int> Humidity_Min
		{
			get
			{
				return this._Humidity_Min;
			}
			set
			{
				if ((this._Humidity_Min != value))
				{
					this.OnHumidity_MinChanging(value);
					this.SendPropertyChanging();
					this._Humidity_Min = value;
					this.SendPropertyChanged("Humidity_Min");
					this.OnHumidity_MinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity_Max", DbType="Int")]
		public System.Nullable<int> Humidity_Max
		{
			get
			{
				return this._Humidity_Max;
			}
			set
			{
				if ((this._Humidity_Max != value))
				{
					this.OnHumidity_MaxChanging(value);
					this.SendPropertyChanging();
					this._Humidity_Max = value;
					this.SendPropertyChanged("Humidity_Max");
					this.OnHumidity_MaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lighting_Duration", DbType="NVarChar(50)")]
		public string Lighting_Duration
		{
			get
			{
				return this._Lighting_Duration;
			}
			set
			{
				if ((this._Lighting_Duration != value))
				{
					this.OnLighting_DurationChanging(value);
					this.SendPropertyChanging();
					this._Lighting_Duration = value;
					this.SendPropertyChanged("Lighting_Duration");
					this.OnLighting_DurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Food_Amount", DbType="Float")]
		public System.Nullable<double> Food_Amount
		{
			get
			{
				return this._Food_Amount;
			}
			set
			{
				if ((this._Food_Amount != value))
				{
					this.OnFood_AmountChanging(value);
					this.SendPropertyChanging();
					this._Food_Amount = value;
					this.SendPropertyChanged("Food_Amount");
					this.OnFood_AmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Food_Eat_No", DbType="Int")]
		public System.Nullable<int> Food_Eat_No
		{
			get
			{
				return this._Food_Eat_No;
			}
			set
			{
				if ((this._Food_Eat_No != value))
				{
					this.OnFood_Eat_NoChanging(value);
					this.SendPropertyChanging();
					this._Food_Eat_No = value;
					this.SendPropertyChanged("Food_Eat_No");
					this.OnFood_Eat_NoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Float")]
		public System.Nullable<double> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_Information_Current_Care", Storage="_Hub_Information", ThisKey="HubID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Hub_Information Hub_Information
		{
			get
			{
				return this._Hub_Information.Entity;
			}
			set
			{
				Hub_Information previousValue = this._Hub_Information.Entity;
				if (((previousValue != value) 
							|| (this._Hub_Information.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hub_Information.Entity = null;
						previousValue.Current_Care = null;
					}
					this._Hub_Information.Entity = value;
					if ((value != null))
					{
						value.Current_Care = this;
						this._HubID = value.ID;
					}
					else
					{
						this._HubID = default(string);
					}
					this.SendPropertyChanged("Hub_Information");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hub_Information")]
	public partial class Hub_Information : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private string _Location;
		
		private string _Email;
		
		private EntityRef<Action> _Action;
		
		private EntityRef<Action_Setting> _Action_Setting;
		
		private EntityRef<Chicken> _Chicken;
		
		private EntityRef<Condition> _Condition;
		
		private EntityRef<Current_Care> _Current_Care;
		
		private EntitySet<Inoculation_List> _Inoculation_Lists;
		
		private EntitySet<Notification> _Notifications;
		
		private EntitySet<Log> _Logs;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Hub_Information()
		{
			this._Action = default(EntityRef<Action>);
			this._Action_Setting = default(EntityRef<Action_Setting>);
			this._Chicken = default(EntityRef<Chicken>);
			this._Condition = default(EntityRef<Condition>);
			this._Current_Care = default(EntityRef<Current_Care>);
			this._Inoculation_Lists = new EntitySet<Inoculation_List>(new Action<Inoculation_List>(this.attach_Inoculation_Lists), new Action<Inoculation_List>(this.detach_Inoculation_Lists));
			this._Notifications = new EntitySet<Notification>(new Action<Notification>(this.attach_Notifications), new Action<Notification>(this.detach_Notifications));
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(50)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_Information_Action", Storage="_Action", ThisKey="ID", OtherKey="HubID", IsUnique=true, IsForeignKey=false)]
		public Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				Action previousValue = this._Action.Entity;
				if (((previousValue != value) 
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.Hub_Information = null;
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.Hub_Information = this;
					}
					this.SendPropertyChanged("Action");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_Information_Action_Setting", Storage="_Action_Setting", ThisKey="ID", OtherKey="HubID", IsUnique=true, IsForeignKey=false)]
		public Action_Setting Action_Setting
		{
			get
			{
				return this._Action_Setting.Entity;
			}
			set
			{
				Action_Setting previousValue = this._Action_Setting.Entity;
				if (((previousValue != value) 
							|| (this._Action_Setting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action_Setting.Entity = null;
						previousValue.Hub_Information = null;
					}
					this._Action_Setting.Entity = value;
					if ((value != null))
					{
						value.Hub_Information = this;
					}
					this.SendPropertyChanged("Action_Setting");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_Information_Chicken", Storage="_Chicken", ThisKey="ID", OtherKey="HubID", IsUnique=true, IsForeignKey=false)]
		public Chicken Chicken
		{
			get
			{
				return this._Chicken.Entity;
			}
			set
			{
				Chicken previousValue = this._Chicken.Entity;
				if (((previousValue != value) 
							|| (this._Chicken.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chicken.Entity = null;
						previousValue.Hub_Information = null;
					}
					this._Chicken.Entity = value;
					if ((value != null))
					{
						value.Hub_Information = this;
					}
					this.SendPropertyChanged("Chicken");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_Information_Condition", Storage="_Condition", ThisKey="ID", OtherKey="HubID", IsUnique=true, IsForeignKey=false)]
		public Condition Condition
		{
			get
			{
				return this._Condition.Entity;
			}
			set
			{
				Condition previousValue = this._Condition.Entity;
				if (((previousValue != value) 
							|| (this._Condition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Condition.Entity = null;
						previousValue.Hub_Information = null;
					}
					this._Condition.Entity = value;
					if ((value != null))
					{
						value.Hub_Information = this;
					}
					this.SendPropertyChanged("Condition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_Information_Current_Care", Storage="_Current_Care", ThisKey="ID", OtherKey="HubID", IsUnique=true, IsForeignKey=false)]
		public Current_Care Current_Care
		{
			get
			{
				return this._Current_Care.Entity;
			}
			set
			{
				Current_Care previousValue = this._Current_Care.Entity;
				if (((previousValue != value) 
							|| (this._Current_Care.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Current_Care.Entity = null;
						previousValue.Hub_Information = null;
					}
					this._Current_Care.Entity = value;
					if ((value != null))
					{
						value.Hub_Information = this;
					}
					this.SendPropertyChanged("Current_Care");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_Information_Inoculation_List", Storage="_Inoculation_Lists", ThisKey="ID", OtherKey="HubId")]
		public EntitySet<Inoculation_List> Inoculation_Lists
		{
			get
			{
				return this._Inoculation_Lists;
			}
			set
			{
				this._Inoculation_Lists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_Information_Notification", Storage="_Notifications", ThisKey="ID", OtherKey="HubId")]
		public EntitySet<Notification> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_Information_Log", Storage="_Logs", ThisKey="ID", OtherKey="HubID")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Hub_Information", Storage="_User", ThisKey="Email", OtherKey="Email", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Hub_Informations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Hub_Informations.Add(this);
						this._Email = value.Email;
					}
					else
					{
						this._Email = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inoculation_Lists(Inoculation_List entity)
		{
			this.SendPropertyChanging();
			entity.Hub_Information = this;
		}
		
		private void detach_Inoculation_Lists(Inoculation_List entity)
		{
			this.SendPropertyChanging();
			entity.Hub_Information = null;
		}
		
		private void attach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Hub_Information = this;
		}
		
		private void detach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Hub_Information = null;
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Hub_Information = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Hub_Information = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inoculation_List")]
	public partial class Inoculation_List : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HubId;
		
		private string _DaysOld;
		
		private string _Medicine;
		
		private string _Method;
		
		private string _SpeciesID;
		
		private string _TypeID;
		
		private EntityRef<Chicken_Library> _Chicken_Library;
		
		private EntityRef<Hub_Information> _Hub_Information;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHubIdChanging(string value);
    partial void OnHubIdChanged();
    partial void OnDaysOldChanging(string value);
    partial void OnDaysOldChanged();
    partial void OnMedicineChanging(string value);
    partial void OnMedicineChanged();
    partial void OnMethodChanging(string value);
    partial void OnMethodChanged();
    partial void OnSpeciesIDChanging(string value);
    partial void OnSpeciesIDChanged();
    partial void OnTypeIDChanging(string value);
    partial void OnTypeIDChanged();
    #endregion
		
		public Inoculation_List()
		{
			this._Chicken_Library = default(EntityRef<Chicken_Library>);
			this._Hub_Information = default(EntityRef<Hub_Information>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubId", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HubId
		{
			get
			{
				return this._HubId;
			}
			set
			{
				if ((this._HubId != value))
				{
					if (this._Hub_Information.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHubIdChanging(value);
					this.SendPropertyChanging();
					this._HubId = value;
					this.SendPropertyChanged("HubId");
					this.OnHubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaysOld", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DaysOld
		{
			get
			{
				return this._DaysOld;
			}
			set
			{
				if ((this._DaysOld != value))
				{
					this.OnDaysOldChanging(value);
					this.SendPropertyChanging();
					this._DaysOld = value;
					this.SendPropertyChanged("DaysOld");
					this.OnDaysOldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicine", DbType="NVarChar(50)")]
		public string Medicine
		{
			get
			{
				return this._Medicine;
			}
			set
			{
				if ((this._Medicine != value))
				{
					this.OnMedicineChanging(value);
					this.SendPropertyChanging();
					this._Medicine = value;
					this.SendPropertyChanged("Medicine");
					this.OnMedicineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Method", DbType="NVarChar(50)")]
		public string Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeciesID", DbType="NVarChar(50)")]
		public string SpeciesID
		{
			get
			{
				return this._SpeciesID;
			}
			set
			{
				if ((this._SpeciesID != value))
				{
					this.OnSpeciesIDChanging(value);
					this.SendPropertyChanging();
					this._SpeciesID = value;
					this.SendPropertyChanged("SpeciesID");
					this.OnSpeciesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="NVarChar(50)")]
		public string TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._Chicken_Library.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chicken_Library_Inoculation_List", Storage="_Chicken_Library", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public Chicken_Library Chicken_Library
		{
			get
			{
				return this._Chicken_Library.Entity;
			}
			set
			{
				Chicken_Library previousValue = this._Chicken_Library.Entity;
				if (((previousValue != value) 
							|| (this._Chicken_Library.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chicken_Library.Entity = null;
						previousValue.Inoculation_Lists.Remove(this);
					}
					this._Chicken_Library.Entity = value;
					if ((value != null))
					{
						value.Inoculation_Lists.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(string);
					}
					this.SendPropertyChanged("Chicken_Library");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_Information_Inoculation_List", Storage="_Hub_Information", ThisKey="HubId", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Hub_Information Hub_Information
		{
			get
			{
				return this._Hub_Information.Entity;
			}
			set
			{
				Hub_Information previousValue = this._Hub_Information.Entity;
				if (((previousValue != value) 
							|| (this._Hub_Information.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hub_Information.Entity = null;
						previousValue.Inoculation_Lists.Remove(this);
					}
					this._Hub_Information.Entity = value;
					if ((value != null))
					{
						value.Inoculation_Lists.Add(this);
						this._HubId = value.ID;
					}
					else
					{
						this._HubId = default(string);
					}
					this.SendPropertyChanged("Hub_Information");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notification")]
	public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Noti_Code;
		
		private System.Nullable<bool> _Noti_Action;
		
		private System.Nullable<bool> _Noti_Read;
		
		private string _HubId;
		
		private string _Date_Time;
		
		private EntityRef<Hub_Information> _Hub_Information;
		
		private EntityRef<Notification_Content> _Notification_Content;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNoti_CodeChanging(System.Nullable<int> value);
    partial void OnNoti_CodeChanged();
    partial void OnNoti_ActionChanging(System.Nullable<bool> value);
    partial void OnNoti_ActionChanged();
    partial void OnNoti_ReadChanging(System.Nullable<bool> value);
    partial void OnNoti_ReadChanged();
    partial void OnHubIdChanging(string value);
    partial void OnHubIdChanged();
    partial void OnDate_TimeChanging(string value);
    partial void OnDate_TimeChanged();
    #endregion
		
		public Notification()
		{
			this._Hub_Information = default(EntityRef<Hub_Information>);
			this._Notification_Content = default(EntityRef<Notification_Content>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Noti_Code", DbType="Int")]
		public System.Nullable<int> Noti_Code
		{
			get
			{
				return this._Noti_Code;
			}
			set
			{
				if ((this._Noti_Code != value))
				{
					if (this._Notification_Content.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoti_CodeChanging(value);
					this.SendPropertyChanging();
					this._Noti_Code = value;
					this.SendPropertyChanged("Noti_Code");
					this.OnNoti_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Noti_Action", DbType="Bit")]
		public System.Nullable<bool> Noti_Action
		{
			get
			{
				return this._Noti_Action;
			}
			set
			{
				if ((this._Noti_Action != value))
				{
					this.OnNoti_ActionChanging(value);
					this.SendPropertyChanging();
					this._Noti_Action = value;
					this.SendPropertyChanged("Noti_Action");
					this.OnNoti_ActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Noti_Read", DbType="Bit")]
		public System.Nullable<bool> Noti_Read
		{
			get
			{
				return this._Noti_Read;
			}
			set
			{
				if ((this._Noti_Read != value))
				{
					this.OnNoti_ReadChanging(value);
					this.SendPropertyChanging();
					this._Noti_Read = value;
					this.SendPropertyChanged("Noti_Read");
					this.OnNoti_ReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubId", DbType="NVarChar(50)")]
		public string HubId
		{
			get
			{
				return this._HubId;
			}
			set
			{
				if ((this._HubId != value))
				{
					if (this._Hub_Information.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHubIdChanging(value);
					this.SendPropertyChanging();
					this._HubId = value;
					this.SendPropertyChanged("HubId");
					this.OnHubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Time", DbType="NVarChar(50)")]
		public string Date_Time
		{
			get
			{
				return this._Date_Time;
			}
			set
			{
				if ((this._Date_Time != value))
				{
					this.OnDate_TimeChanging(value);
					this.SendPropertyChanging();
					this._Date_Time = value;
					this.SendPropertyChanged("Date_Time");
					this.OnDate_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_Information_Notification", Storage="_Hub_Information", ThisKey="HubId", OtherKey="ID", IsForeignKey=true)]
		public Hub_Information Hub_Information
		{
			get
			{
				return this._Hub_Information.Entity;
			}
			set
			{
				Hub_Information previousValue = this._Hub_Information.Entity;
				if (((previousValue != value) 
							|| (this._Hub_Information.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hub_Information.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._Hub_Information.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._HubId = value.ID;
					}
					else
					{
						this._HubId = default(string);
					}
					this.SendPropertyChanged("Hub_Information");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notification_Content_Notification", Storage="_Notification_Content", ThisKey="Noti_Code", OtherKey="Noti_Code", IsForeignKey=true)]
		public Notification_Content Notification_Content
		{
			get
			{
				return this._Notification_Content.Entity;
			}
			set
			{
				Notification_Content previousValue = this._Notification_Content.Entity;
				if (((previousValue != value) 
							|| (this._Notification_Content.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notification_Content.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._Notification_Content.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._Noti_Code = value.Noti_Code;
					}
					else
					{
						this._Noti_Code = default(Nullable<int>);
					}
					this.SendPropertyChanged("Notification_Content");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notification_Content")]
	public partial class Notification_Content : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Noti_Code;
		
		private string _Noti_Content;
		
		private EntitySet<Notification> _Notifications;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoti_CodeChanging(int value);
    partial void OnNoti_CodeChanged();
    partial void OnNoti_ContentChanging(string value);
    partial void OnNoti_ContentChanged();
    #endregion
		
		public Notification_Content()
		{
			this._Notifications = new EntitySet<Notification>(new Action<Notification>(this.attach_Notifications), new Action<Notification>(this.detach_Notifications));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Noti_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Noti_Code
		{
			get
			{
				return this._Noti_Code;
			}
			set
			{
				if ((this._Noti_Code != value))
				{
					this.OnNoti_CodeChanging(value);
					this.SendPropertyChanging();
					this._Noti_Code = value;
					this.SendPropertyChanged("Noti_Code");
					this.OnNoti_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Noti_Content", DbType="NVarChar(50)")]
		public string Noti_Content
		{
			get
			{
				return this._Noti_Content;
			}
			set
			{
				if ((this._Noti_Content != value))
				{
					this.OnNoti_ContentChanging(value);
					this.SendPropertyChanging();
					this._Noti_Content = value;
					this.SendPropertyChanged("Noti_Content");
					this.OnNoti_ContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notification_Content_Notification", Storage="_Notifications", ThisKey="Noti_Code", OtherKey="Noti_Code")]
		public EntitySet<Notification> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Notification_Content = this;
		}
		
		private void detach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Notification_Content = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Logs")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HubID;
		
		private string _Time;
		
		private string _Action;
		
		private string _Account;
		
		private EntityRef<Hub_Information> _Hub_Information;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHubIDChanging(string value);
    partial void OnHubIDChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    partial void OnAccountChanging(string value);
    partial void OnAccountChanged();
    #endregion
		
		public Log()
		{
			this._Hub_Information = default(EntityRef<Hub_Information>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HubID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HubID
		{
			get
			{
				return this._HubID;
			}
			set
			{
				if ((this._HubID != value))
				{
					if (this._Hub_Information.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHubIDChanging(value);
					this.SendPropertyChanging();
					this._HubID = value;
					this.SendPropertyChanged("HubID");
					this.OnHubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="NVarChar(50)")]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account", DbType="NVarChar(50)")]
		public string Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				if ((this._Account != value))
				{
					this.OnAccountChanging(value);
					this.SendPropertyChanging();
					this._Account = value;
					this.SendPropertyChanged("Account");
					this.OnAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hub_Information_Log", Storage="_Hub_Information", ThisKey="HubID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Hub_Information Hub_Information
		{
			get
			{
				return this._Hub_Information.Entity;
			}
			set
			{
				Hub_Information previousValue = this._Hub_Information.Entity;
				if (((previousValue != value) 
							|| (this._Hub_Information.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hub_Information.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._Hub_Information.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._HubID = value.ID;
					}
					else
					{
						this._HubID = default(string);
					}
					this.SendPropertyChanged("Hub_Information");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Email;
		
		private string _Name;
		
		private System.Nullable<bool> _Sexual;
		
		private System.Nullable<int> _YearOld;
		
		private string _Picture;
		
		private string _Password;
		
		private EntitySet<Hub_Information> _Hub_Informations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSexualChanging(System.Nullable<bool> value);
    partial void OnSexualChanged();
    partial void OnYearOldChanging(System.Nullable<int> value);
    partial void OnYearOldChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			this._Hub_Informations = new EntitySet<Hub_Information>(new Action<Hub_Information>(this.attach_Hub_Informations), new Action<Hub_Information>(this.detach_Hub_Informations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sexual", DbType="Bit")]
		public System.Nullable<bool> Sexual
		{
			get
			{
				return this._Sexual;
			}
			set
			{
				if ((this._Sexual != value))
				{
					this.OnSexualChanging(value);
					this.SendPropertyChanging();
					this._Sexual = value;
					this.SendPropertyChanged("Sexual");
					this.OnSexualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearOld", DbType="Int")]
		public System.Nullable<int> YearOld
		{
			get
			{
				return this._YearOld;
			}
			set
			{
				if ((this._YearOld != value))
				{
					this.OnYearOldChanging(value);
					this.SendPropertyChanging();
					this._YearOld = value;
					this.SendPropertyChanged("YearOld");
					this.OnYearOldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="NVarChar(50)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(150)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Hub_Information", Storage="_Hub_Informations", ThisKey="Email", OtherKey="Email")]
		public EntitySet<Hub_Information> Hub_Informations
		{
			get
			{
				return this._Hub_Informations;
			}
			set
			{
				this._Hub_Informations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hub_Informations(Hub_Information entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Hub_Informations(Hub_Information entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
